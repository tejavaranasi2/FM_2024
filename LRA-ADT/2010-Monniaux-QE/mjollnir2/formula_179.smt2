; benchmark generated from python API
(set-info :status unknown)
(declare-datatypes ((RealState 0)) (((RMk1 (rval1 Real)) (RMk2 (rval2 Real)))))
 (assert
 (forall ((|v11:0| Real) )(exists ((|v10:1_st| RealState) (val!2838 Real) )(forall ((|v9:2| Real) )(exists ((|v8:3_st| RealState) (val!2839 Real) )(forall ((|v7:4| Real) )(exists ((|v6:5_st| RealState) (val!2840 Real) )(forall ((|v5:6| Real) )(exists ((|v4:7_st| RealState) (val!2841 Real) )(forall ((|v3:8| Real) )(exists ((|v2:9_st| RealState) (val!2842 Real) )(forall ((|v1:10| Real) )(exists ((|v0:11_st| RealState) (val!2843 Real) )(let ((?x2542 (rval2 |v10:1_st|)))
 (let ((?x971 (* 20.0 ?x2542)))
 (let ((?x1898 (rval2 |v4:7_st|)))
 (let ((?x48 (- 9.0)))
 (let ((?x3172 (* ?x48 ?x1898)))
 (let ((?x661 (* 19.0 ?x1898)))
 (let ((?x1077 (+ (+ (* 15.0 |v11:0|) (* (- 19.0) (rval2 |v2:9_st|))) (* (- 13.0) (rval2 |v0:11_st|)))))
 (let (($x1536 (and (<= (+ ?x1077 ?x661) 11.0) (<= (+ (+ (+ (* 10.0 (rval2 |v6:5_st|)) ?x3172) ?x3172) ?x971) 7.0))))
 (let ((?x2012 (+ (+ (+ (* 11.0 |v7:4|) (* (- 4.0) |v7:4|)) ?x2542) (* (- 1.0) (rval2 |v0:11_st|)))))
 (let ((?x2225 (- 10.0)))
 (let ((?x1095 (* ?x2225 |v5:6|)))
 (let ((?x2424 (+ (+ (+ (* (- 17.0) |v3:8|) (* (- 3.0) ?x2542)) (* 10.0 |v7:4|)) ?x1095)))
 (let ((?x608 (rval2 |v0:11_st|)))
 (let ((?x1879 (* 13.0 ?x608)))
 (let ((?x3176 (+ (+ (+ (* (- 3.0) ?x2542) (* (- 12.0) |v9:2|)) ?x1879) (* 6.0 ?x2542))))
 (let ((?x2101 (* 8.0 |v7:4|)))
 (let ((?x2566 (+ (+ (* (- 4.0) (rval2 |v6:5_st|)) (* (- 17.0) (rval2 |v2:9_st|))) (* (- 18.0) |v11:0|))))
 (let ((?x2176 (- 16.0)))
 (let ((?x1868 (+ (+ (* (- 2.0) (rval2 |v8:3_st|)) (* 18.0 (rval2 |v8:3_st|))) (* (- 11.0) |v9:2|))))
 (let ((?x347 (- 19.0)))
 (let ((?x232 (+ (+ (+ (* 12.0 (rval2 |v6:5_st|)) (* 20.0 ?x1898)) (* (- 12.0) |v7:4|)) (* (- 14.0) (rval2 |v8:3_st|)))))
 (let (($x2262 (and (and (<= ?x232 ?x347) (<= (+ ?x1868 (* 9.0 |v3:8|)) ?x2176)) (or (<= (+ ?x2566 ?x2101) 1.0) (<= ?x3176 2.0)))))
 (let ((?x61 (- 6.0)))
 (let ((?x2567 (+ (+ (+ (* 10.0 |v7:4|) (* 14.0 ?x1898)) (* 11.0 |v1:10|)) (* 16.0 |v7:4|))))
 (let ((?x1054 (* 13.0 |v5:6|)))
 (let ((?x451 (rval2 |v6:5_st|)))
 (let ((?x737 (* 8.0 ?x451)))
 (let ((?x325 (+ (+ (+ (* (- 5.0) (rval2 |v8:3_st|)) (* (- 18.0) |v7:4|)) ?x737) ?x1054)))
 (let ((?x456 (* 15.0 ?x2542)))
 (let (($x1897 (<= (+ (+ (+ (* (- 3.0) |v5:6|) (* 20.0 |v5:6|)) (* ?x48 |v3:8|)) ?x456) ?x2176)))
 (let ((?x2115 (- 8.0)))
 (let ((?x3049 (+ (+ (* 18.0 ?x451) (* ?x2176 (rval2 |v8:3_st|))) (* (- 15.0) (rval2 |v8:3_st|)))))
 (let (($x1759 (or (or (<= (+ ?x3049 (* ?x61 |v11:0|)) ?x2115) $x1897) (or (<= ?x325 6.0) (<= ?x2567 ?x61)))))
 (let ((?x1563 (+ (+ (* 12.0 |v11:0|) (* (- 18.0) ?x1898)) (* (- 7.0) (rval2 |v8:3_st|)))))
 (let ((?x2040 (- 13.0)))
 (let ((?x1592 (rval2 |v2:9_st|)))
 (let ((?x140 (* 10.0 ?x1592)))
 (let (($x2058 (<= (+ (+ (+ (* (- 1.0) (rval2 |v8:3_st|)) (* ?x2225 ?x1898)) ?x1095) ?x140) ?x2040)))
 (let ((?x2437 (+ (+ (+ (* 6.0 |v11:0|) (* (- 1.0) |v1:10|)) (* (- 11.0) ?x1898)) (* ?x2115 |v1:10|))))
 (let ((?x2796 (* 4.0 |v9:2|)))
 (let ((?x2292 (+ (+ (+ (* ?x48 (rval2 |v8:3_st|)) (* 0.0 |v5:6|)) (* ?x2115 |v9:2|)) ?x2796)))
 (let (($x1848 (and (or (<= ?x2292 2.0) (<= ?x2437 20.0)) (or $x2058 (<= (+ ?x1563 (* ?x2115 ?x2542)) 8.0)))))
 (let (($x1471 (or (or $x1848 $x1759) (and $x2262 (and (and (<= ?x2424 4.0) (<= ?x2012 5.0)) $x1536)))))
 (let ((?x2531 (+ (+ (+ (* 11.0 |v3:8|) (* 11.0 |v5:6|)) |v5:6|) (* (- 12.0) ?x451))))
 (let ((?x3045 (+ (+ (+ (* 13.0 |v3:8|) |v1:10|) (* 3.0 |v5:6|)) (* (- 20.0) ?x451))))
 (let ((?x882 (+ (+ (+ (* 2.0 |v7:4|) (* 20.0 ?x1898)) (* (- 17.0) ?x451)) (* ?x347 |v3:8|))))
 (let ((?x913 (* 5.0 |v1:10|)))
 (let (($x2436 (<= (+ (+ (+ (* ?x2115 ?x1898) (* ?x48 |v9:2|)) (* 3.0 |v3:8|)) ?x913) 17.0)))
 (let (($x1923 (or (or $x2436 (<= ?x882 ?x2115)) (or (<= ?x3045 4.0) (<= ?x2531 2.0)))))
 (let ((?x2498 (- 5.0)))
 (let (($x2799 (<= (+ (+ (+ (* 18.0 ?x451) ?x2101) (* 4.0 |v11:0|)) (* 0.0 |v5:6|)) ?x2498)))
 (let ((?x2869 (* 0.0 |v5:6|)))
 (let (($x134 (<= (+ (+ (+ (* (- 14.0) |v5:6|) (* 17.0 ?x451)) (* ?x2115 ?x608)) ?x2869) ?x2115)))
 (let ((?x1675 (* 11.0 ?x1898)))
 (let ((?x1938 (+ (+ (+ (* (- 18.0) (rval2 |v8:3_st|)) (* 17.0 |v9:2|)) (* ?x2115 ?x451)) ?x1675)))
 (let ((?x2412 (- 3.0)))
 (let ((?x2975 (* 4.0 |v7:4|)))
 (let (($x84 (<= (+ (+ (+ (* (- 17.0) |v9:2|) (* ?x2225 ?x1592)) (* 3.0 |v11:0|)) ?x2975) ?x2412)))
 (let ((?x2063 (* ?x2412 |v5:6|)))
 (let (($x1622 (<= (+ (+ (+ (* 20.0 ?x1898) (* 4.0 ?x608)) (* 3.0 |v9:2|)) ?x2063) 8.0)))
 (let ((?x2033 (+ (+ (+ (* 9.0 ?x1592) (* 20.0 |v3:8|)) (* 3.0 ?x2542)) (* (- 17.0) ?x1898))))
 (let ((?x539 (* 19.0 |v5:6|)))
 (let ((?x153 (+ (+ (+ (* (- 4.0) ?x1592) (* 3.0 |v1:10|)) (* (- 2.0) ?x1592)) ?x539)))
 (let ((?x2978 (rval2 |v8:3_st|)))
 (let ((?x2104 (* ?x2498 ?x2978)))
 (let (($x470 (<= (+ (+ (+ (* (- 14.0) ?x608) ?x1879) (* 2.0 |v3:8|)) ?x2104) ?x2498)))
 (let ((?x845 (- 2.0)))
 (let ((?x1177 (- 12.0)))
 (let ((?x2100 (* ?x1177 |v7:4|)))
 (let (($x2204 (<= (+ (+ (+ (* 20.0 |v5:6|) (* ?x347 ?x1592)) (* 18.0 ?x1592)) ?x2100) ?x845)))
 (let ((?x718 (* 3.0 |v1:10|)))
 (let (($x1791 (<= (+ (+ (+ (* ?x2115 |v5:6|) (* 4.0 ?x2542)) (* ?x845 ?x1592)) ?x718) 15.0)))
 (let (($x1559 (or (and (or $x1791 $x2204) (or $x470 (<= ?x153 ?x48))) (and (<= ?x2033 16.0) $x1622))))
 (let (($x572 (and $x1559 (and (and (or $x84 (<= ?x1938 14.0)) (and $x134 $x2799)) $x1923))))
 (let ((?x2054 (* 13.0 ?x451)))
 (let (($x3050 (<= (+ (+ (+ (* 0.0 ?x1898) (* 16.0 |v3:8|)) (* 0.0 ?x1898)) ?x2054) 1.0)))
 (let ((?x103 (+ (+ (+ (* ?x845 |v7:4|) (* ?x61 ?x608)) (* ?x2225 |v1:10|)) (* ?x1177 ?x2978))))
 (let (($x1423 (not (= |v0:11_st| (RMk1 val!2843)))))
 (let (($x937 (not (= |v2:9_st| (RMk1 val!2842)))))
 (let (($x1277 (not (= |v4:7_st| (RMk1 val!2841)))))
 (let (($x1151 (not (= |v6:5_st| (RMk1 val!2840)))))
 (let (($x1011 (not (= |v8:3_st| (RMk1 val!2839)))))
 (let (($x439 (not (= |v10:1_st| (RMk1 val!2838)))))
 (and $x439 $x1011 $x1151 $x1277 $x937 $x1423 (and (and (<= ?x103 5.0) $x3050) (and $x572 $x1471)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
(check-sat)
