; benchmark generated from python API
(set-info :status unknown)
(declare-datatypes ((RealState 0)) (((RMk1 (rval1 Real)) (RMk2 (rval2 Real)))))
 (assert
 (forall ((|v9:0| Real) )(exists ((|v8:1_st| RealState) (val!365 Real) )(forall ((|v7:2| Real) )(exists ((|v6:3_st| RealState) (val!366 Real) )(forall ((|v5:4| Real) )(exists ((|v4:5_st| RealState) (val!367 Real) )(forall ((|v3:6| Real) )(exists ((|v2:7_st| RealState) (val!368 Real) )(forall ((|v1:8| Real) )(exists ((|v0:9_st| RealState) (val!369 Real) )(let ((?x522 (- 17.0)))
 (let (($x1142 (<= (+ (+ (* (- 13.0) |v7:2|) (* 6.0 (rval2 |v6:3_st|))) (* 8.0 |v5:4|)) ?x522)))
 (let ((?x1039 (- 3.0)))
 (let ((?x796 (rval2 |v2:7_st|)))
 (let ((?x1167 (* 11.0 ?x796)))
 (let (($x175 (or (<= (+ (+ (* 10.0 |v5:4|) (* (- 11.0) (rval2 |v4:5_st|))) ?x1167) ?x1039) $x1142)))
 (let ((?x660 (- 15.0)))
 (let (($x988 (<= (+ (+ (* 18.0 |v1:8|) (* 13.0 |v9:0|)) (* (- 4.0) (rval2 |v4:5_st|))) ?x660)))
 (let ((?x1300 (- 5.0)))
 (let ((?x701 (rval2 |v8:1_st|)))
 (let ((?x903 (- 11.0)))
 (let ((?x217 (* ?x903 ?x701)))
 (let (($x723 (and (and (<= (+ (+ (* 10.0 ?x701) (* 20.0 |v3:6|)) ?x217) ?x1300) $x988) $x175)))
 (let (($x874 (<= (+ (+ (* 4.0 |v7:2|) (* (- 8.0) |v3:6|)) (* (- 9.0) |v7:2|)) ?x522)))
 (let (($x220 (and $x874 (<= (+ (+ (* (- 19.0) ?x796) ?x217) (rval2 |v4:5_st|)) (- 10.0)))))
 (let ((?x865 (rval2 |v6:3_st|)))
 (let ((?x445 (* 13.0 ?x865)))
 (let (($x93 (<= (+ (+ (* (- 10.0) (rval2 |v4:5_st|)) (* (- 13.0) |v3:6|)) ?x445) ?x522)))
 (let (($x339 (and (<= (+ (+ (* ?x522 ?x701) (* ?x903 |v3:6|)) (* ?x903 |v7:2|)) (- 14.0)) $x93)))
 (let (($x1100 (and (<= (+ (+ (* ?x522 |v7:2|) ?x865) (* 14.0 ?x701)) ?x1039) (<= (+ (+ (* (- 12.0) ?x865) (* ?x522 |v7:2|)) ?x1167) 4.0))))
 (let ((?x309 (- 14.0)))
 (let (($x527 (<= (+ (+ (* (- 1.0) (rval2 |v4:5_st|)) (* 18.0 |v1:8|)) (* 18.0 |v5:4|)) ?x309)))
 (let ((?x334 (- 16.0)))
 (let ((?x1069 (+ (+ (* (- 4.0) ?x796) (* 5.0 (rval2 |v0:9_st|))) (* (- 7.0) (rval2 |v0:9_st|)))))
 (let ((?x598 (- 18.0)))
 (let (($x416 (<= (+ (+ (* 2.0 ?x865) (* 10.0 |v5:4|)) (* 4.0 (rval2 |v4:5_st|))) ?x598)))
 (let ((?x30 (+ (+ (* (- 1.0) (rval2 |v4:5_st|)) (* 3.0 ?x701)) (* (- 19.0) |v7:2|))))
 (let (($x461 (<= (+ (+ (* 7.0 ?x701) (* 12.0 ?x796)) (* 3.0 (rval2 |v0:9_st|))) 20.0)))
 (let (($x991 (and $x461 (<= (+ (+ (* 12.0 |v9:0|) ?x445) (* (- 20.0) |v5:4|)) 13.0))))
 (let (($x1118 (and (and $x991 (and (<= ?x30 7.0) $x416)) (and (or (<= ?x1069 ?x334) $x527) $x1100))))
 (let ((?x819 (- 2.0)))
 (let (($x670 (<= (+ (+ (* ?x309 |v9:0|) (* ?x819 ?x865)) (* (- 12.0) (rval2 |v4:5_st|))) ?x819)))
 (let (($x762 (<= (+ (+ (* (- 13.0) |v7:2|) (* 6.0 |v3:6|)) (* (- 1.0) |v3:6|)) 15.0)))
 (let ((?x139 (- 10.0)))
 (let (($x549 (<= (+ (+ (* 6.0 |v9:0|) (* (- 8.0) ?x865)) (* 19.0 |v7:2|)) ?x139)))
 (let ((?x887 (- 20.0)))
 (let (($x966 (or (<= (+ (+ (* ?x819 |v9:0|) (* 18.0 |v5:4|)) (* ?x334 |v1:8|)) ?x887) (<= (+ (+ (rval2 |v0:9_st|) (* ?x139 |v5:4|)) (* ?x660 ?x796)) ?x334))))
 (let (($x726 (<= (+ (+ (* 13.0 (rval2 |v4:5_st|)) (* ?x660 |v9:0|)) (* 3.0 |v1:8|)) 18.0)))
 (let (($x244 (or (<= (+ (+ (* 6.0 |v7:2|) (* ?x903 ?x796)) (* 3.0 |v7:2|)) 1.0) $x726)))
 (let ((?x1053 (- 6.0)))
 (let (($x271 (<= (+ (+ (* 7.0 |v9:0|) (* (- 8.0) ?x796)) (* 12.0 |v5:4|)) 6.0)))
 (let (($x570 (and $x271 (<= (+ (+ (* ?x887 ?x701) (* 17.0 |v1:8|)) (* 4.0 ?x865)) ?x1053))))
 (let (($x1374 (and (<= (+ (+ (* ?x819 ?x701) (* 13.0 |v5:4|)) (* 16.0 |v1:8|)) 8.0) (<= (+ (+ (* 15.0 |v3:6|) |v3:6|) (* 9.0 ?x796)) 10.0))))
 (let (($x783 (and (and $x1374 $x570) (<= (+ (+ (* 11.0 |v1:8|) (* 11.0 |v3:6|)) (* 6.0 |v9:0|)) 3.0))))
 (let (($x822 (or (and $x783 (and (or $x244 $x966) (or $x549 (or $x762 $x670)))) (and $x1118 (and (and $x339 $x220) $x723)))))
 (let (($x945 (not (= |v0:9_st| (RMk1 val!369)))))
 (let (($x729 (not (= |v2:7_st| (RMk1 val!368)))))
 (let (($x655 (not (= |v4:5_st| (RMk1 val!367)))))
 (let (($x501 (not (= |v6:3_st| (RMk1 val!366)))))
 (let (($x699 (not (= |v8:1_st| (RMk1 val!365)))))
 (and $x699 $x501 $x655 $x729 $x945 $x822))))))))))))))))))))))))))))))))))))))))))))))))))))
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
(check-sat)
