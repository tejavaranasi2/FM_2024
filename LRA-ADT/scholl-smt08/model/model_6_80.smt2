; benchmark generated from python API
(set-info :status unknown)
(declare-fun bool.b8 () Bool)
(declare-fun bool.b7 () Bool)
(declare-fun bool.b10 () Bool)
(declare-fun bool.b12 () Bool)
(declare-fun bool.b14 () Bool)
(declare-fun x5 () Real)
(declare-fun x3 () Real)
(declare-fun x4 () Real)
(declare-fun bool.b6 () Bool)
(declare-fun bool.b23 () Bool)
(declare-fun bool.b5 () Bool)
(declare-fun bool.b22 () Bool)
(assert
 (forall ((?lambda Real) )(let (($x16544 (not bool.b12)))
 (let (($x321 (not bool.b14)))
 (let (($x23687 (and $x321 (and $x16544 (and (not bool.b10) (and bool.b7 (not bool.b8)))))))
 (let ((?x31414 (+ x3 (* (/ 1.0 2.0) ?lambda))))
 (let ((?x4526 (* 1.0 ?x31414)))
 (let ((?x4014 (+ ?x4526 (* 3.0 (+ x5 (* 1.0 ?lambda))))))
 (let (($x19908 (<= ?x4014 60.0)))
 (let ((?x8397 (- 50.0)))
 (let (($x13005 (<= (+ (* (- 1.0) ?x31414) (* (- 3.0) (+ x5 (* 1.0 ?lambda)))) ?x8397)))
 (let (($x19921 (and (not (and (not (<= ?x4014 30.0)) $x23687)) (not (and bool.b7 (<= ?x4014 30.0))))))
 (let ((?x1596 (+ ?x4526 (* (/ 3.0 20.0) (+ x4 (* 60.0 ?lambda))))))
 (let (($x8795 (<= ?x1596 1200.0)))
 (let (($x6275 (<= ?x1596 723.0)))
 (let (($x2850 (not $x6275)))
 (let (($x8977 (and $x2850 (and $x8795 (not $x19921)))))
 (let (($x4482 (and (not (and (not $x13005) (and (not (and bool.b7 $x6275)) (not $x8977)))) (not (and $x13005 (not (and $x19908 $x23687)))))))
 (let (($x1559 (<= ?x4526 40.0)))
 (let (($x19411 (and (not (and (not $x1559) (not (and $x19908 (and $x8795 $x23687))))) (not (and $x1559 (not $x4482))))))
 (let ((?x12980 (+ ?x4526 (* (/ 3.0 40.0) (+ x4 (* 60.0 ?lambda))))))
 (let (($x7678 (<= ?x12980 610.0)))
 (let (($x6583 (<= ?x12980 (/ 743.0 2.0))))
 (let (($x3170 (not $x6583)))
 (let (($x15593 (and (not (and $x6583 (not (and (<= ?x4014 50.0) $x8977)))) (not (and $x3170 (not (and $x7678 $x19411)))))))
 (let (($x24252 (<= (* (- 1.0) (+ x5 (* 1.0 ?lambda))) (- 10.0))))
 (let (($x11592 (not (and $x24252 $x15593))))
 (let ((?x36 (+ ?x1596 (* (/ (- 19.0) 2.0) (+ x5 (* 1.0 ?lambda))))))
 (let (($x92 (<= ?x36 628.0)))
 (let ((?x3356 (- 5.0)))
 (let ((?x24601 (+ ?x4526 (* (/ (- 1.0) 2.0) (+ x5 (* 1.0 ?lambda))))))
 (let (($x14171 (and (not (and $x321 (and $x16544 (and (not bool.b8) (not bool.b10))))) (not (<= ?x24601 ?x3356)))))
 (let (($x325 (<= ?x36 1105.0)))
 (let (($x30671 (not $x92)))
 (let (($x9791 (not (and $x30671 (not (and $x325 (not (not (and bool.b7 (not $x14171))))))))))
 (let (($x10060 (<= ?x24601 15.0)))
 (let (($x8544 (and (not (and (not $x10060) $x11592)) (not (and $x10060 (not (and $x9791 (not (and $x92 $x11592)))))))))
 (let (($x33724 (and (not (and $x8795 (not $x23687))) (not (and (not $x8795) (not (<= ?x4014 50.0)))))))
 (let (($x15045 (and (not (and $x3170 (not (and $x7678 (and $x8795 $x23687))))) (not (and $x6583 (not (and $x2850 $x33724)))))))
 (let (($x13228 (not (<= (+ ?x4526 (* (/ 1.0 20.0) (+ x4 (* 60.0 ?lambda)))) 261.0))))
 (let ((?x26295 (- 1.0)))
 (let ((?x2883 (* ?x26295 ?x31414)))
 (let (($x12461 (<= ?x2883 ?x8397)))
 (let (($x16210 (and (not (and (not $x12461) (not (and $x2850 $x23687)))) (not (and $x12461 (not (and $x13228 $x23687)))))))
 (let (($x1169 (and (<= (+ ?x4526 (* (/ 1.0 20.0) (+ x4 (* 60.0 ?lambda)))) 420.0) (and $x7678 (and $x12461 $x23687)))))
 (let (($x39426 (and (<= ?x4526 50.0) (and (not (and $x3170 (not $x1169))) (not (and $x6583 (not $x16210)))))))
 (let (($x10619 (not $x1559)))
 (let (($x24264 (and $x24252 (and (not (and $x10619 (not $x39426))) (not (and $x1559 (not $x15045)))))))
 (let (($x20992 (not $x24264)))
 (let ((?x4879 (+ ?x12980 (* ?x3356 (+ x5 (* 1.0 ?lambda))))))
 (let (($x12967 (<= ?x4879 (/ 643.0 2.0))))
 (let (($x28666 (not $x23687)))
 (let (($x22529 (and $x321 (and $x16544 (and (not bool.b8) (not bool.b10))))))
 (let (($x22613 (<= ?x24601 25.0)))
 (let (($x9319 (and (not (and (not $x22613) $x20992)) (not (and $x22613 (not (and bool.b7 (and $x22529 (<= ?x4879 560.0)))))))))
 (let (($x19976 (not $x12967)))
 (let (($x19495 (not (and (not (and $x19976 (not (and $x325 $x9319)))) (not (and $x28666 $x12967))))))
 (let (($x4259 (not (and $x10060 (not (and (not (and $x30671 $x19495)) (not (and $x92 $x20992))))))))
 (let (($x15873 (not $x10060)))
 (let (($x3660 (and $x15873 (not (and (not (and $x19976 (not $x9319))) (not (and $x12967 $x20992)))))))
 (let (($x6784 (not bool.b23)))
 (let (($x19524 (and (not (and $x6784 (not (and bool.b6 (and (not $x3660) $x4259))))) (not (and bool.b23 (not (and bool.b6 $x8544)))))))
 (let (($x9605 (not bool.b5)))
 (let (($x13993 (not (and bool.b5 (not (and (not bool.b6) (not bool.b7)))))))
 (let (($x6680 (not bool.b22)))
 (let (($x9110 (exists ((?lambdaprime Real) )(! (let (($x6680 (not bool.b22)))
 (let (($x12170 (not (<= (* (- 1.0) (+ x3 (* (/ 1.0 2.0) ?lambdaprime))) (- 30.0)))))
 (let (($x5896 (and $x12170 (not (<= (* (- 1.0) (+ x4 (* 60.0 ?lambdaprime))) (- 4910.0))))))
 (let (($x382 (and (not $x5896) (and $x6680 (and (not bool.b7) (and (not bool.b5) bool.b6))))))
 (let (($x20988 (and $x12170 (not (<= (* (- 1.0) (+ x4 (* 60.0 ?lambdaprime))) (- 4500.0))))))
 (let (($x4604 (and (not $x20988) (and $x6680 (and bool.b7 (and (not bool.b5) (not bool.b6)))))))
 (let (($x10081 (and (not (<= (* (- 1.0) (+ x4 (* 60.0 ?lambdaprime))) (- 4100.0))) $x12170)))
 (let (($x18216 (and (not $x10081) (and $x6680 (and (not bool.b7) (and (not bool.b5) (not bool.b6)))))))
 (let (($x39428 (and (not (<= (* (- 1.0) (+ x5 (* 1.0 ?lambdaprime))) (- 10.0))) (and (and (not $x18216) (not $x4604)) (not $x382)))))
 (and (and (<= 0.0 ?lambdaprime) (<= ?lambdaprime ?lambda)) (not $x39428))))))))))) :qid k!27))
 ))
 (or (or $x9110 (< ?lambda 0.0)) (not (and $x6680 (and $x13993 (not (and $x9605 (not $x19524))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 )
(check-sat)
