; benchmark generated from python API
(set-info :status unknown)
(declare-datatypes ((RealState 0)) (((RMk1 (rval1 Real)) (RMk2 (rval2 Real)))))
 (declare-fun x1 () Real)
(assert
 (let (($x1796 (exists ((?y1_st RealState) (val!248 Real) )(let (($x4490 (exists ((?y2 Real) )(! (let (($x8048 (forall ((?y3 Real) )(! (let (($x12824 (exists ((?y4 Real) )(! (let ((?x10165 (- 22.0)))
 (let ((?x9628 (* 75.0 x1)))
 (let ((?x6619 (+ (+ (+ (* (- 21.0) ?y4) (* 47.0 ?y3)) (* 48.0 ?y2)) ?x9628)))
 (<= ?x6619 ?x10165)))) :qid k!20))
 ))
 (let (($x13198 (= (+ (+ (* 17.0 ?y3) (* (- 50.0) (rval2 ?y1_st))) (* 88.0 x1)) 0.0)))
 (let (($x10114 (<= (+ (+ (* (- 75.0) ?y3) (* 26.0 (rval2 ?y1_st))) (* 21.0 x1)) 71.0)))
 (or (and $x10114 $x13198) $x12824)))) :qid k!20))
 ))
 (let (($x5972 (forall ((?y3 Real) )(! (exists ((?y5 Real) )(! (let ((?x11816 (- 80.0)))
 (let ((?x10209 (- 11.0)))
 (let ((?x8047 (* ?x10209 x1)))
 (let ((?x5540 (+ (+ (+ (* 43.0 ?y5) (* 60.0 ?y2)) (* (- 23.0) (rval2 ?y1_st))) ?x8047)))
 (< ?x5540 ?x11816))))) :qid k!20))
  :qid k!20))
 ))
 (and $x5972 $x8048))) :qid k!20))
 ))
 (let (($x12889 (exists ((?y2 Real) )(! (exists ((?y4 Real) )(! (exists ((?y5 Real) )(! (exists ((?y6 Real) )(! (let ((?x4211 (* (- 33.0) x1)))
 (let ((?x9198 (- 23.0)))
 (let ((?x6226 (* ?x9198 ?y2)))
 (let ((?x6126 (+ (+ (* 34.0 ?y6) (* 63.0 ?y4)) ?x6226)))
 (= (+ (+ ?x6126 (* (- 84.0) (rval2 ?y1_st))) ?x4211) 12.0))))) :qid k!20))
  :qid k!20))
  :qid k!20))
  :qid k!20))
 ))
 (let (($x3470 (not (= ?y1_st (RMk1 val!248)))))
 (and $x3470 (or $x12889 $x4490))))))
 ))
 (let (($x63 (exists ((?y1_st RealState) (val!246 Real) )(exists ((?y2_st RealState) (val!247 Real) )(let (($x2315 (forall ((?y4 Real) )(! (let ((?x12905 (- 97.0)))
 (let ((?x11615 (* (- 19.0) x1)))
 (let ((?x8145 (rval2 ?y1_st)))
 (let ((?x9145 (* 86.0 ?x8145)))
 (let (($x5918 (= (+ (+ (+ (* 80.0 ?y4) (* 68.0 (rval2 ?y2_st))) ?x9145) ?x11615) ?x12905)))
 (let (($x2445 (>= (+ (+ (* 46.0 ?y4) (* 90.0 (rval2 ?y2_st))) (* (- 87.0) ?x8145)) 1.0)))
 (let ((?x2354 (- 39.0)))
 (let (($x7040 (= (+ (+ (* 17.0 ?y4) (* 94.0 (rval2 ?y2_st))) (* (- 60.0) x1)) ?x2354)))
 (and (not $x7040) (or $x2445 (not $x5918))))))))))) :qid k!20))
 ))
 (let ((?x10596 (- 9.0)))
 (let (($x12925 (= (+ (* (- 88.0) (rval2 ?y2_st)) (* (- 60.0) (rval2 ?y1_st))) ?x10596)))
 (let ((?x2130 (* 96.0 x1)))
 (let (($x11667 (> (+ (+ (* 38.0 (rval2 ?y2_st)) (* (- 13.0) (rval2 ?y1_st))) ?x2130) 0.0)))
 (let (($x882 (not (= (+ (* (- 45.0) (rval2 ?y1_st)) (* 31.0 x1)) (- 21.0)))))
 (let (($x13216 (forall ((?y3 Real) )(! (= (* (- 83.0) x1) 35.0) :qid k!20))
 ))
 (let (($x5728 (forall ((?y3 Real) )(! (> (+ (* (- 58.0) ?y3) (* 19.0 x1)) 0.0) :qid k!20))
 ))
 (let (($x8385 (and $x5728 $x13216)))
 (let (($x3765 (forall ((?y4 Real) )(! (let (($x5447 (= (+ (+ (* (- 2.0) ?y4) (* 39.0 (rval2 ?y2_st))) (* 29.0 x1)) 0.0)))
 (not $x5447)) :qid k!20))
 ))
 (let (($x3512 (exists ((?y4 Real) )(! (let ((?x13085 (* 48.0 x1)))
 (let ((?x8145 (rval2 ?y1_st)))
 (let ((?x100 (* 27.0 ?x8145)))
 (< (+ (+ (+ (* 47.0 ?y4) (* (- 30.0) (rval2 ?y2_st))) ?x100) ?x13085) 70.0)))) :qid k!20))
 ))
 (let (($x3470 (not (= ?y2_st (RMk1 val!247)))))
 (let (($x2543 (not (= ?y1_st (RMk1 val!246)))))
 (and $x2543 $x3470 (or (and (or $x3512 $x3765) (or $x8385 (or (or $x882 $x11667) $x12925))) $x2315))))))))))))))))
 )
 ))
 (let (($x3143 (exists ((?y2_st RealState) (val!244 Real) )(exists ((?y3_st RealState) (val!245 Real) )(forall ((?y4 Real) )(forall ((?y5 Real) )(let ((?x7110 (* 53.0 x1)))
 (let ((?x6868 (rval2 ?y2_st)))
 (let ((?x4182 (* 47.0 ?x6868)))
 (let ((?x12194 (+ (+ (+ (* 20.0 ?y5) (* 9.0 ?y4)) (* (- 2.0) (rval2 ?y3_st))) ?x4182)))
 (let ((?x3800 (* (- 18.0) x1)))
 (let ((?x1869 (+ (+ (+ (* 68.0 ?y5) (* 96.0 ?y4)) (* (- 51.0) (rval2 ?y3_st))) (* (- 38.0) ?x6868))))
 (let (($x2543 (not (= ?y3_st (RMk1 val!245)))))
 (let (($x1064 (not (= ?y2_st (RMk1 val!244)))))
 (and $x1064 $x2543 (or (not (= (+ ?x1869 ?x3800) 45.0)) (not (= (+ ?x12194 ?x7110) 42.0)))))))))))))
 )
 )
 )
 ))
 (let (($x1896 (forall ((?y2 Real) )(let (($x10407 (forall ((?y5 Real) )(! (> (* (- 57.0) x1) (- 7.0)) :qid k!20))
 ))
 (let (($x3786 (exists ((?y3 Real) )(! (exists ((?y4 Real) )(! (let (($x5324 (<= (+ (+ (* (- 95.0) ?y3) (* (- 39.0) ?y2)) (* 51.0 x1)) 57.0)))
 (and (<= (+ (* 42.0 ?y3) (* (- 64.0) ?y2)) 45.0) $x5324)) :qid k!20))
  :qid k!20))
 ))
 (and $x3786 $x10407))))
 ))
 (let (($x7302 (forall ((?y2 Real) )(or (<= (+ (* (- 22.0) ?y2) (* (- 22.0) x1)) 0.0) (>= (* (- 29.0) x1) 0.0)))
 ))
 (let (($x1084 (exists ((?y2_st RealState) (val!243 Real) )(forall ((?y3 Real) )(let ((?x7224 (- 46.0)))
 (let (($x12939 (> (+ (* 35.0 ?y3) (* (- 75.0) x1)) ?x7224)))
 (let (($x13202 (not (= ?y2_st (RMk1 val!243)))))
 (and $x13202 $x12939)))))
 )
 ))
 (let (($x3657 (forall ((?y2 Real) )(let (($x3963 (and (<= (* 14.0 ?y2) (- 72.0)) (< (* (- 35.0) ?y2) 97.0))))
 (let (($x5602 (forall ((?y3 Real) )(! (>= (+ (* 84.0 ?y2) (* 60.0 x1)) 0.0) :qid k!20))
 ))
 (or $x5602 $x3963))))
 ))
 (let (($x10590 (exists ((?y2_st RealState) (val!241 Real) )(exists ((?y3_st RealState) (val!242 Real) )(forall ((?y4 Real) )(let ((?x10391 (- 75.0)))
 (let ((?x3742 (* ?x10391 x1)))
 (let ((?x4761 (+ (+ (* (- 96.0) ?y4) (* (- 46.0) (rval2 ?y3_st))) (* 1.0 (rval2 ?y2_st)))))
 (let (($x13202 (not (= ?y3_st (RMk1 val!242)))))
 (let (($x2398 (not (= ?y2_st (RMk1 val!241)))))
 (and $x2398 $x13202 (<= (+ ?x4761 ?x3742) 0.0))))))))
 )
 )
 ))
 (let (($x7093 (or (and (or (or $x10590 (and $x3657 (or $x1084 $x7302))) $x1896) $x3143) (and $x63 $x1796))))
 (let (($x5609 (exists ((?y1_st RealState) (val!240 Real) )(forall ((?y2 Real) )(forall ((?y3 Real) )(let (($x4113 (forall ((?y4 Real) )(! (let ((?x10209 (- 11.0)))
 (let ((?x10165 (- 22.0)))
 (let ((?x2027 (* ?x10165 x1)))
 (let ((?x7242 (+ (+ (* ?x10209 ?y4) (* 25.0 ?y3)) (* 74.0 ?y2))))
 (let ((?x2582 (+ (+ (* (- 67.0) ?y4) (* (- 91.0) ?y3)) (* (- 79.0) ?y2))))
 (or (<= (+ ?x2582 (* (- 38.0) (rval2 ?y1_st))) 48.0) (>= (+ (+ ?x7242 (* 63.0 (rval2 ?y1_st))) ?x2027) ?x10209))))))) :qid k!20))
 ))
 (let ((?x11611 (* 16.0 x1)))
 (let ((?x10403 (+ (* (- 71.0) ?y3) (* (- 55.0) ?y2))))
 (let (($x2724 (forall ((?y4 Real) )(! (let ((?x8019 (* (- 90.0) x1)))
 (let ((?x10288 (* 29.0 ?y4)))
 (let ((?x6088 (+ ?x10288 (* (- 5.0) ?y2))))
 (= (+ (+ ?x6088 (* (- 4.0) (rval2 ?y1_st))) ?x8019) 0.0)))) :qid k!20))
 ))
 (let ((?x12708 (* 18.0 x1)))
 (let ((?x8830 (+ (+ (+ (* 46.0 ?y3) (* 74.0 ?y2)) (* 58.0 (rval2 ?y1_st))) ?x12708)))
 (let (($x10372 (and (or (>= ?x8830 0.0) $x2724) (< (+ (+ ?x10403 (* 27.0 (rval2 ?y1_st))) ?x11611) 49.0))))
 (let ((?x380 (* 56.0 x1)))
 (let (($x5749 (= (+ (+ (* (- 85.0) ?y2) (* (- 82.0) (rval2 ?y1_st))) ?x380) 6.0)))
 (let ((?x10105 (- 95.0)))
 (let ((?x7179 (* ?x10105 x1)))
 (let (($x3084 (<= (+ (+ (* (- 13.0) ?y3) (* 79.0 (rval2 ?y1_st))) ?x7179) 0.0)))
 (let (($x3072 (and (> (+ (* (- 56.0) ?y2) (* (- 76.0) (rval2 ?y1_st))) (- 28.0)) $x3084)))
 (let (($x5388 (exists ((?y5 Real) )(! (let ((?x7101 (- 55.0)))
 (let ((?x2934 (* ?x7101 x1)))
 (let ((?x8145 (rval2 ?y1_st)))
 (let ((?x3131 (* 73.0 ?x8145)))
 (let ((?x8529 (* 59.0 ?y2)))
 (let ((?x8413 (+ (+ (* 42.0 ?y5) (* 83.0 ?y3)) ?x8529)))
 (let (($x9191 (= (+ (* (- 68.0) ?y2) (* (- 60.0) x1)) (- 36.0))))
 (and $x9191 (<= (+ (+ ?x8413 ?x3131) ?x2934) 6.0))))))))) :qid k!20))
 ))
 (let (($x6661 (forall ((?y5 Real) )(! (let (($x9663 (forall ((?y6 Real) )(! (let ((?x2339 (* 79.0 x1)))
 (let ((?x10543 (+ (+ (* (- 29.0) ?y6) (* (- 35.0) ?y3)) (* 62.0 ?y2))))
 (let ((?x1103 (* 15.0 ?y2)))
 (let ((?x9963 (+ (+ (* 17.0 ?y5) (* 47.0 ?y3)) ?x1103)))
 (or (<= (+ ?x9963 (* (- 62.0) (rval2 ?y1_st))) 0.0) (not (= (+ (+ ?x10543 (* (- 1.0) (rval2 ?y1_st))) ?x2339) 0.0))))))) :qid k!20))
 ))
 (let (($x12042 (exists ((?y6 Real) )(! (let ((?x12180 (+ (+ (+ (* (- 30.0) ?y6) (* 64.0 ?y5)) (* 6.0 ?y3)) (* 93.0 ?y2))))
 (or (< (+ (* 12.0 ?y2) (* 22.0 (rval2 ?y1_st))) 4.0) (<= (+ ?x12180 (* (- 98.0) (rval2 ?y1_st))) 69.0))) :qid k!20))
 ))
 (and $x12042 $x9663))) :qid k!20))
 ))
 (let (($x2543 (not (= ?y1_st (RMk1 val!240)))))
 (and $x2543 (or $x6661 (or (or $x5388 (or $x3072 (not $x5749))) (and $x10372 $x4113)))))))))))))))))))))
 )
 )
 ))
 (or $x5609 $x7093))))))))))))
(check-sat)
